---
import fs from 'fs';
import path from 'path';

// Read JSON data at build time
const filePath = path.resolve('public/data/memory-cards.json');
const rawData = fs.readFileSync(filePath, 'utf-8');
const unsortedMemoryCards = JSON.parse(rawData).data;

// Sort the memory cards by price_per_gb
const memoryCards = unsortedMemoryCards.sort((a: any, b: any) => {
    // Calculate price per GB if it doesn't exist
    const aPricePerGB = a.price_per_gb !== undefined ? a.price_per_gb : 
                        (a.price && a.computer_memory_size ? a.price / a.computer_memory_size : Infinity);
    
    const bPricePerGB = b.price_per_gb !== undefined ? b.price_per_gb : 
                        (b.price && b.computer_memory_size ? b.price / b.computer_memory_size : Infinity);
    
    return aPricePerGB - bPricePerGB; // Sort in ascending order (lowest price per GB first)
});

const accentioAssociatesTag = 'accentiofinde-20';
---

{memoryCards.length > 0 ? (
<table class="table" id="memoryTable">
    <thead class="table-header">
    <tr>
        <th>Price per GB</th>
        <th>Price</th>
        <th>Capacity</th>
        <th>Speed</th>
        <th>Ratings</th>
        <th>Affiliate Link</th>
    </tr>
    </thead>
    <tbody>
    {memoryCards.map((card: any, index: number) => (
            <tr data-capacity={card.computer_memory_size}
                data-speed={card.memory_speed}
                data-price={card.price}
                data-brand={card.brand}
                data-technology={card.ram_memory_technology}
                data-compatibility={card.compatible_devices}
                data-type={card.computer_memory_type}
                data-condition={card.is_new ? 'new' : 'used'}
                data-latency={card.latency}
            >
                <td>{card.symbol}{card.price_per_gb_formatted !== undefined ? card.price_per_gb_formatted : (card.price_per_gb !== undefined ? card.price_per_gb.toFixed(2) : (card.price && card.computer_memory_size ? (card.price / card.computer_memory_size).toFixed(2) : "0.00"))}</td>
                <td>{card.symbol}{card.price ? card.price.toFixed(2) : "0.00"}</td>
                <td>{card.computer_memory_size ? card.computer_memory_size : 0} GB</td>
                <td>{card.memory_speed}</td>
                <td>{card.rating ? card.rating.toFixed(1) : "N/A"} ({card.ratings_total || 0})</td>
                <td><a href={card.url} target="_blank">{card.link_title || card.title}</a></td>
            </tr>
    ))}
    </tbody>
</table>
    ) : (
<div class="no-results">
    <p>No PC RAM Memory cards found! Please check back later.</p>
</div>
    )}

<style>
    .table-container {
        flex: 1;
        min-width: 0;
    }
    
    .table {
        border-collapse: collapse;
        border-radius: 8px;
        border-spacing: 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin: 0;
        overflow: hidden;
        width: 100%;
    }

    .table-header {
        background-color: #f1f3f5;
    }

    .table-header th {
        border-bottom: 2px solid #dee2e6;
        color: #343a40;
        font-weight: 600;
        padding: 0.1rem 1rem;
        text-align: left;
    }

    tbody tr {
        transition: background-color 0.2s;
    }

    tbody tr:hover {
        background-color: #f8f9fa;
    }

    tbody td {
        border-bottom: 1px solid #e9ecef;
        color: #495057;
        padding: 0.3rem 1rem;
    }

    tbody tr:last-child td {
        border-bottom: none;
    }

    tbody a {
        color: #4361ee;
        text-decoration: none;
        transition: color 0.2s;
    }

    tbody a:hover {
        color: #3249b9;
        text-decoration: underline;
    }

    .no-results {
        align-items: center;
        color: #6c757d;
        display: flex;
        font-size: 1.1rem;
        height: 30vh;
        justify-content: center;
        text-align: center;
    }

    /* General row hover - needs to be before .top-ten:hover */
    tbody tr:hover {
        background-color: #f8f9fa;
    }

    /* Increase specificity and ensure it's after general hover */
    tbody tr.top-ten:hover {
        background-color: #a5d6a7; /* Darker green on hover */
    }

    @media (max-width: 768px) {
        .table {
            font-size: 0.9rem;
        }
        
        .table-header th, tbody td {
            padding: 0.6rem;
        }
    }

    /* Add styles for the first column */
    thead th:first-child,
    tbody td:first-child {
        min-width: 80px; /* Adjust value as needed */
        /* You could also use a fixed width: width: 100px; */
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Get all filter elements
        const selectFilters = document.querySelectorAll(".filter-checkbox:not(.select-all)");
        const selectAllFilters = document.querySelectorAll(".filter-checkbox.select-all");
        const minPriceInput = document.getElementById("filter-price-min") as HTMLInputElement;
        const maxPriceInput = document.getElementById("filter-price-max") as HTMLInputElement;
        const minCapacityInput = document.getElementById("filter-capacity-min") as HTMLInputElement;
        const maxCapacityInput = document.getElementById("filter-capacity-max") as HTMLInputElement;
        const minSpeedInput = document.getElementById("filter-speed-min") as HTMLInputElement;
        const maxSpeedInput = document.getElementById("filter-speed-max") as HTMLInputElement;

        // Function to handle filtering of table rows
        function filterTable() {
            const tableRows = document.querySelectorAll("#memoryTable tbody tr");
            const filterGroups = new Map();

            // Collect all filter groups and their selected values
            selectFilters.forEach(filter => {
                const filterId = filter.id;
                const [_, group, value] = filterId.split('-');
                if (!filterGroups.has(group)) {
                    filterGroups.set(group, { 
                        selected: new Set(),
                        total: new Set()
                    });
                }
                filterGroups.get(group).total.add(value.toLowerCase());
                if ((filter as HTMLInputElement).checked) {
                    filterGroups.get(group).selected.add(value.toLowerCase());
                }
            });

            // Get numeric filter values
            const priceRange = {
                min: parseFloat(minPriceInput?.value || '0'),
                max: parseFloat(maxPriceInput?.value || 'Infinity')
            };
            const capacityRange = {
                min: parseFloat(minCapacityInput?.value || '0'),
                max: parseFloat(maxCapacityInput?.value || 'Infinity')
            };
            const speedRange = {
                min: parseFloat(minSpeedInput?.value || '0'),
                max: parseFloat(maxSpeedInput?.value || 'Infinity')
            };

            // Filter rows
            tableRows.forEach(row => {
                let shouldShow = true;

                // Check each filter group
                filterGroups.forEach(({selected, total}, group) => {
                    // Skip if all filters in the group are selected or if the group has no filters
                    if (selected.size === total.size || total.size === 0) {
                        return;
                    }

                    const rowValue = row.getAttribute(`data-${group}`)?.toLowerCase();
                    if (!rowValue) {
                        shouldShow = false;
                        return;
                    }

                    if (group === 'compatibility') {
                        const rowCompatibilities = rowValue.split(',').map(v => v.trim().toLowerCase());
                        // Show only if at least one of the row's compatibilities is in the selected set
                        const hasSelectedMatch = rowCompatibilities.some(compatibility => 
                            selected.has(compatibility === 'rack server' ? 'rackserver' : compatibility)
                        );
                        if (!hasSelectedMatch) {
                            shouldShow = false;
                        }
                    } else {
                        // For other groups, show only if the row's value is in the selected set
                        if (!selected.has(rowValue)) {
                            shouldShow = false;
                        }
                    }
                });

                // Check numeric ranges
                const rowPrice = parseFloat(row.getAttribute('data-price') || '0');
                const rowCapacity = parseFloat(row.getAttribute('data-capacity') || '0');
                const rowSpeed = parseFloat(row.getAttribute('data-speed') || '0');

                if (rowPrice < priceRange.min || rowPrice > priceRange.max ||
                    rowCapacity < capacityRange.min || rowCapacity > capacityRange.max ||
                    rowSpeed < speedRange.min || rowSpeed > speedRange.max) {
                    shouldShow = false;
                }

                (row as HTMLElement).style.display = shouldShow ? '' : 'none';
            });
        }

        // Handle "Select All" functionality
        function handleSelectAll(selectAllCheckbox: HTMLInputElement) {
            const group = selectAllCheckbox.getAttribute('data-group');
            const isChecked = selectAllCheckbox.checked;
            
            if (group) {
                const groupCheckboxes = document.querySelectorAll(`.filter-checkbox[id^="filter-${group}-"]:not(.select-all)`);
                groupCheckboxes.forEach((checkbox) => {
                    (checkbox as HTMLInputElement).checked = isChecked;
                });
                filterTable();
            }
        }

        // Update "Select All" state when individual filters change
        function updateSelectAllState(changedCheckbox: HTMLInputElement) {
            const [_, group] = changedCheckbox.id.split('-');
            const selectAllCheckbox = document.getElementById(`filter-${group}-all`) as HTMLInputElement;
            
            if (selectAllCheckbox) {
                const groupCheckboxes = document.querySelectorAll(`.filter-checkbox[id^="filter-${group}-"]:not(.select-all)`);
                const allChecked = Array.from(groupCheckboxes).every((checkbox) => (checkbox as HTMLInputElement).checked);
                selectAllCheckbox.checked = allChecked;
            }
        }

        // Add event listeners
        selectAllFilters.forEach(filter => {
            filter.addEventListener("change", function(this: HTMLInputElement) {
                handleSelectAll(this);
            });
        });

        selectFilters.forEach(filter => {
            filter.addEventListener("change", function(this: HTMLInputElement) {
                updateSelectAllState(this);
                filterTable();
            });
        });

        // Add event listeners for numeric inputs
        [minPriceInput, maxPriceInput, minCapacityInput, maxCapacityInput, minSpeedInput, maxSpeedInput].forEach(input => {
            if (input) {
                input.addEventListener("input", filterTable);
            }
        });
    });
</script>