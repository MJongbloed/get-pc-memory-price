---
import fs from 'fs';
import path from 'path';

// Read JSON data at build time
const filePath = path.resolve('public/data/memory-cards.json');
const rawData = fs.readFileSync(filePath, 'utf-8');
const memoryCards = JSON.parse(rawData).data;
const accentioAssociatesTag = 'accentiofinde-20';
---

{memoryCards.length > 0 ? (
<table class="table" id="memoryTable">
    <thead class="table-header">
    <tr>
        <th>Price per GB</th>
        <th>Price</th>
        <th>Capacity</th>
        <th>Speed</th>
        <th>Ratings</th>
        <th>Affiliate Link</th>
    </tr>
    </thead>
    <tbody>
    {memoryCards.map((card: any) => (
            <tr data-capacity={card.computer_memory_size}
                data-speed={card.memory_speed}
                data-price={card.price}
                data-brand={card.brand}
                data-technology={card.ram_memory_technology}
                data-compatibility={card.compatible_devices}
                data-type={card.computer_memory_type}
                data-stock={card.in_stock}
                data-condition={card.is_new ? 'new' : 'used'}>
                <td>{card.symbol}{(card.price && card.computer_memory_size ? (card.price / card.computer_memory_size).toFixed(2) : "0.00")}</td>
                <td>{card.symbol}{card.price ? card.price.toFixed(2) : "0.00"}</td>
                <td>{card.computer_memory_size ? card.computer_memory_size : 0} GB</td>
                <td>{card.memory_speed}</td>
                <td>{card.rating ? card.rating.toFixed(1) : "N/A"} ({card.ratings_total || 0})</td>
                <td><a href={`${card.url}&tag=${accentioAssociatesTag}`} target="_blank">{card.title}</a></td>
            </tr>
    ))}
    </tbody>
</table>
    ) : (
<div class="no-results">
    <p>No PC RAM Memory cards found! Please check back later.</p>
</div>
    )}

<style>
    .table-container {
        flex: 1;
        min-width: 0;
    }
    
    .table {
        width: 100%;
        border-collapse: collapse;
        border-spacing: 0;
        margin: 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

    .table-header {
        background-color: #f1f3f5;
    }

    .table-header th {
        padding: 0.1rem 1rem;
        text-align: left;
        font-weight: 600;
        color: #343a40;
        border-bottom: 2px solid #dee2e6;
    }

    tbody tr {
        transition: background-color 0.2s;
    }

    tbody tr:hover {
        background-color: #f8f9fa;
    }

    tbody td {
        padding: 0.3rem 1rem;
        border-bottom: 1px solid #e9ecef;
        color: #495057;
    }

    tbody tr:last-child td {
        border-bottom: none;
    }

    tbody a {
        color: #4361ee;
        text-decoration: none;
        transition: color 0.2s;
    }

    tbody a:hover {
        color: #3249b9;
        text-decoration: underline;
    }

    .no-results {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 30vh;
        text-align: center;
        color: #6c757d;
        font-size: 1.1rem;
    }

    @media (max-width: 768px) {
        .table {
            font-size: 0.9rem;
        }
        
        .table-header th, tbody td {
            padding: 0.6rem;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const selectFilters = document.querySelectorAll(".filter-checkbox");
        const minPriceInput = document.getElementById("filter-price-min") as HTMLInputElement;
        const maxPriceInput = document.getElementById("filter-price-max") as HTMLInputElement;
        const minCapacityInput = document.getElementById("filter-capacity-min") as HTMLInputElement;
        const maxCapacityInput = document.getElementById("filter-capacity-max") as HTMLInputElement;

        function filterTable() {
            if (!minPriceInput || !maxPriceInput || !minCapacityInput || !maxCapacityInput) return;
            
            const tableRows = document.querySelectorAll("#memoryTable tbody tr");

            tableRows.forEach(row => {
                let rowVisible = true;

                selectFilters.forEach(filter => {
                    const filterId = filter.id;
                    const filterValue = (filter as HTMLInputElement).checked;
                    const filterGroupName = filterId.split('-')[1];
                    const filterSelectedName = filterId.split('-')[2].toLowerCase();
                    const rowValue = row.getAttribute('data-' + filterGroupName);
                    
                    // Special handling for condition filters
                    if (filterGroupName === 'condition') {
                        const rowCondition = rowValue?.toLowerCase() || '';
                        if (rowCondition === filterSelectedName && !filterValue) {
                            rowVisible = false;
                        }
                    } 
                    // Special handling for stock filter
                    else if (filterGroupName === 'stock') {
                        const isInStock = rowValue === 'true';
                        if (filterValue && !isInStock) {
                            rowVisible = false;
                        }
                    }
                    else {
                        const rowMatch = rowValue ? rowValue.toLowerCase() === filterSelectedName : false;
                        if (rowMatch && !filterValue) {
                            rowVisible = false;
                        }
                    }
                });

                const minPrice = parseFloat(minPriceInput.value) || 0;
                const maxPrice = parseFloat(maxPriceInput.value) || Infinity;
                const rowPrice = parseFloat(row.getAttribute('data-price') || '0');

                const minCapacity = parseFloat(minCapacityInput.value) || 0;
                const maxCapacity = parseFloat(maxCapacityInput.value) || Infinity;
                const rowCapacity = parseFloat(row.getAttribute('data-capacity') || '0');

                // Decide if a row should be visible or not, based on the filters.
                if (rowPrice < minPrice || rowPrice > maxPrice || rowCapacity < minCapacity || rowCapacity > maxCapacity) {
                    rowVisible = false;
                }

                (row as HTMLElement).style.display = rowVisible ? '' : 'none';
            });
        }

        // Attach event listeners for the checkboxes.
        selectFilters.forEach(filter => {
            filter.addEventListener("change", filterTable);
        });

        // Attach event listeners for the numeric inputs.
        if (minPriceInput && maxPriceInput && minCapacityInput && maxCapacityInput) {
            minPriceInput.addEventListener("input", filterTable);
            maxPriceInput.addEventListener("input", filterTable);
            minCapacityInput.addEventListener("input", filterTable);
            maxCapacityInput.addEventListener("input", filterTable);
        }
    });
</script>