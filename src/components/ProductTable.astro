---
import fs from 'fs';
import path from 'path';

// Read JSON data at build time
const filePath = path.resolve('public/data/memory-cards.json');
const rawData = fs.readFileSync(filePath, 'utf-8');
const unsortedMemoryCards = JSON.parse(rawData).data;

// Sort the memory cards by price_per_gb
const memoryCards = unsortedMemoryCards.sort((a: any, b: any) => {
    // Calculate price per GB if it doesn't exist
    const aPricePerGB = a.price_per_gb !== undefined ? a.price_per_gb : 
                        (a.price && a.computer_memory_size ? a.price / a.computer_memory_size : Infinity);
    
    const bPricePerGB = b.price_per_gb !== undefined ? b.price_per_gb : 
                        (b.price && b.computer_memory_size ? b.price / b.computer_memory_size : Infinity);
    
    return aPricePerGB - bPricePerGB; // Sort in ascending order (lowest price per GB first)
});

const accentioAssociatesTag = 'accentiofinde-20';
---

{memoryCards.length > 0 ? (
<table class="table" id="memoryTable">
    <thead class="table-header">
    <tr>
        <th>Price per GB</th>
        <th>Price</th>
        <th>Capacity</th>
        <th>Speed</th>
        <th>Ratings</th>
        <th>Affiliate Link</th>
    </tr>
    </thead>
    <tbody>
    {memoryCards.map((card: any, index: number) => (
            <tr data-capacity={card.computer_memory_size}
                data-speed={card.memory_speed}
                data-price={card.price}
                data-brand={card.brand}
                data-technology={card.ram_memory_technology}
                data-compatibility={card.compatible_devices}
                data-type={card.computer_memory_type}
                data-condition={card.is_new ? 'new' : 'used'}
                data-latency={card.latency}
            >
                <td>{card.symbol}{card.price_per_gb_formatted !== undefined ? card.price_per_gb_formatted : (card.price_per_gb !== undefined ? card.price_per_gb.toFixed(2) : (card.price && card.computer_memory_size ? (card.price / card.computer_memory_size).toFixed(2) : "0.00"))}</td>
                <td>{card.symbol}{card.price ? card.price.toFixed(2) : "0.00"}</td>
                <td>{card.computer_memory_size ? card.computer_memory_size : 0} GB</td>
                <td>{card.memory_speed}</td>
                <td>{card.rating ? card.rating.toFixed(1) : "N/A"} ({card.ratings_total || 0})</td>
                <td><a href={`${card.url}&tag=${accentioAssociatesTag}`} target="_blank">{card.link_title || card.title}</a></td>
            </tr>
    ))}
    </tbody>
</table>
    ) : (
<div class="no-results">
    <p>No PC RAM Memory cards found! Please check back later.</p>
</div>
    )}

<style>
    .table-container {
        flex: 1;
        min-width: 0;
    }
    
    .table {
        border-collapse: collapse;
        border-radius: 8px;
        border-spacing: 0;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        margin: 0;
        overflow: hidden;
        width: 100%;
    }

    .table-header {
        background-color: #f1f3f5;
    }

    .table-header th {
        border-bottom: 2px solid #dee2e6;
        color: #343a40;
        font-weight: 600;
        padding: 0.1rem 1rem;
        text-align: left;
    }

    tbody tr {
        transition: background-color 0.2s;
    }

    tbody tr:hover {
        background-color: #f8f9fa;
    }

    tbody td {
        border-bottom: 1px solid #e9ecef;
        color: #495057;
        padding: 0.3rem 1rem;
    }

    tbody tr:last-child td {
        border-bottom: none;
    }

    tbody a {
        color: #4361ee;
        text-decoration: none;
        transition: color 0.2s;
    }

    tbody a:hover {
        color: #3249b9;
        text-decoration: underline;
    }

    .no-results {
        align-items: center;
        color: #6c757d;
        display: flex;
        font-size: 1.1rem;
        height: 30vh;
        justify-content: center;
        text-align: center;
    }

    /* General row hover - needs to be before .top-ten:hover */
    tbody tr:hover {
        background-color: #f8f9fa;
    }

    /* Increase specificity and ensure it's after general hover */
    tbody tr.top-ten:hover {
        background-color: #a5d6a7; /* Darker green on hover */
    }

    @media (max-width: 768px) {
        .table {
            font-size: 0.9rem;
        }
        
        .table-header th, tbody td {
            padding: 0.6rem;
        }
    }

    /* Add styles for the first column */
    thead th:first-child,
    tbody td:first-child {
        min-width: 80px; /* Adjust value as needed */
        /* You could also use a fixed width: width: 100px; */
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Defer execution by 1 second
        const selectFilters = document.querySelectorAll(".filter-checkbox:not(.select-all)");
        const selectAllFilters = document.querySelectorAll(".filter-checkbox.select-all");
        const minPriceInput = document.getElementById("filter-price-min") as HTMLInputElement;
        const maxPriceInput = document.getElementById("filter-price-max") as HTMLInputElement;
        const minCapacityInput = document.getElementById("filter-capacity-min") as HTMLInputElement;
        const maxCapacityInput = document.getElementById("filter-capacity-max") as HTMLInputElement;

        function filterTable() {
            if (!minPriceInput || !maxPriceInput || !minCapacityInput || !maxCapacityInput) return;
            
            const tableRows = document.querySelectorAll("#memoryTable tbody tr");

            // First, collect all checked compatibility filters
            const enabledCompatibilityFilters = new Set<string>();
            selectFilters.forEach(filter => {
                const filterId = filter.id;
                const filterValue = (filter as HTMLInputElement).checked;
                const filterGroupName = filterId.split('-')[1];
                const filterSelectedName = filterId.split('-')[2].toLowerCase();
                
                if (filterGroupName === 'compatibility' && filterValue) {
                    // Handle the special case for "Rack Server"
                    const compatibilityName = filterSelectedName === 'rackserver' ? 'rack server' : filterSelectedName;
                    enabledCompatibilityFilters.add(compatibilityName);
                }
            });

            tableRows.forEach(row => {
                let rowVisible = true;
                let hasCompatibilityFilter = false;
                let matchesAnyCompatibility = false;

                // Get the row's compatibility values
                const rowCompatibilityAttr = row.getAttribute('data-compatibility');
                const rowCompatibilities = rowCompatibilityAttr ? rowCompatibilityAttr.split(',').map(v => v.trim().toLowerCase()) : [];

                selectFilters.forEach(filter => {
                    const filterId = filter.id;
                    const filterValue = (filter as HTMLInputElement).checked;
                    const filterGroupName = filterId.split('-')[1];
                    const filterSelectedName = filterId.split('-')[2].toLowerCase();
                    const rowValue = row.getAttribute('data-' + filterGroupName);
                    
                    // Special handling for condition filters
                    if (filterGroupName === 'condition') {
                        const rowCondition = rowValue?.toLowerCase() || '';
                        if (rowCondition === filterSelectedName && !filterValue) {
                            rowVisible = false;
                        }
                    } 
                    // Special handling for brand filters
                    else if (filterGroupName === 'brand') {
                        // Get the original brand name from the data attribute
                        const originalBrand = (filter as HTMLInputElement).getAttribute('data-original-brand');
                        if (originalBrand && rowValue === originalBrand && !filterValue) {
                            rowVisible = false;
                        }
                    }
                    // Special handling for compatibility filters - just track if this is a compatibility filter
                    else if (filterGroupName === 'compatibility') {
                        hasCompatibilityFilter = true;
                        
                        // If it's checked, see if the row matches this compatibility
                        if (filterValue) {
                            const compatibilityName = filterSelectedName === 'rackserver' ? 'rack server' : filterSelectedName;
                            if (rowCompatibilities.includes(compatibilityName)) {
                                matchesAnyCompatibility = true;
                            }
                        }
                    }
                    else {
                        const rowMatch = rowValue ? rowValue.toLowerCase() === filterSelectedName : false;
                        if (rowMatch && !filterValue) {
                            rowVisible = false;
                        }
                    }
                });

                // If we have compatibility filters and the row doesn't match any of them, hide it
                if (hasCompatibilityFilter && enabledCompatibilityFilters.size > 0 && !matchesAnyCompatibility) {
                    rowVisible = false;
                }

                const minPrice = parseFloat(minPriceInput.value) || 0;
                const maxPrice = parseFloat(maxPriceInput.value) || Infinity;
                const rowPrice = parseFloat(row.getAttribute('data-price') || '0');

                const minCapacity = parseFloat(minCapacityInput.value) || 0;
                const maxCapacity = parseFloat(maxCapacityInput.value) || Infinity;
                const rowCapacity = parseFloat(row.getAttribute('data-capacity') || '0');

                // Decide if a row should be visible or not, based on the filters.
                if (rowPrice < minPrice || rowPrice > maxPrice || rowCapacity < minCapacity || rowCapacity > maxCapacity) {
                    rowVisible = false;
                }

                (row as HTMLElement).style.display = rowVisible ? '' : 'none';
            });
        }

        // Handle "Select All" functionality
        function handleSelectAll(selectAllCheckbox: HTMLInputElement) {
            const group = selectAllCheckbox.getAttribute('data-group');
            const isChecked = selectAllCheckbox.checked;
            
            // Find all checkboxes that belong to this group
            const groupCheckboxes = document.querySelectorAll(`.filter-checkbox[id^="filter-${group}-"]:not(.select-all)`);
            
            // Set all checkboxes in the group to match the "Select All" state
            groupCheckboxes.forEach((checkbox) => {
                (checkbox as HTMLInputElement).checked = isChecked;
            });
            
            // Update the table filtering
            filterTable();
        }
        
        // Update "Select All" checkbox state when individual filters change
        function updateSelectAllState(changedCheckbox: HTMLInputElement) {
            const filterId = changedCheckbox.id;
            const filterGroupName = filterId.split('-')[1];
            const selectAllCheckbox = document.getElementById(`filter-${filterGroupName}-all`) as HTMLInputElement;
            
            if (selectAllCheckbox) {
                const groupCheckboxes = document.querySelectorAll(`.filter-checkbox[id^="filter-${filterGroupName}-"]:not(.select-all)`);
                let allChecked = true;
                
                groupCheckboxes.forEach((checkbox) => {
                    if (!(checkbox as HTMLInputElement).checked) {
                        allChecked = false;
                    }
                });
                
                // Update the "Select All" checkbox without triggering its change event
                selectAllCheckbox.checked = allChecked;
            }
        }

        // Attach event listeners for the "Select All" checkboxes
        selectAllFilters.forEach(filter => {
            filter.addEventListener("change", function(this: HTMLInputElement) {
                handleSelectAll(this);
            });
        });

        // Attach event listeners for the individual checkboxes
        selectFilters.forEach(filter => {
            filter.addEventListener("change", function(this: HTMLInputElement) {
                updateSelectAllState(this);
                filterTable();
            });
        });

        // Attach event listeners for the numeric inputs
        if (minPriceInput && maxPriceInput && minCapacityInput && maxCapacityInput) {
            minPriceInput.addEventListener("input", filterTable);
            maxPriceInput.addEventListener("input", filterTable);
            minCapacityInput.addEventListener("input", filterTable);
            maxCapacityInput.addEventListener("input", filterTable);
        }

        // Initial call to apply styles on page load
        filterTable();
    });
</script>